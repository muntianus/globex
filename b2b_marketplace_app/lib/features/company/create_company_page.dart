import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/models/company.dart';
import '../../core/providers/company_provider.dart';
import '../../core/services/api_service.dart';
import 'package:b2b_marketplace_app/l10n/app_localizations.dart';
import 'package:go_router/go_router.dart';

class CreateCompanyPage extends ConsumerStatefulWidget {
  const CreateCompanyPage({super.key});

  @override
  ConsumerState<CreateCompanyPage> createState() => _CreateCompanyPageState();
}

class _CreateCompanyPageState extends ConsumerState<CreateCompanyPage> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _innController = TextEditingController();
  final _phoneController = TextEditingController();
  final _emailController = TextEditingController();
  final _websiteController = TextEditingController();
  final _yearFoundedController = TextEditingController();
  
  String _selectedCategory = 'manufacturing';
  String _selectedRegion = '–ú–æ—Å–∫–≤–∞';
  String _selectedEmployees = '10-50';
  String _selectedLogo = 'üè¢';
  bool _isLoading = false;

  final List<String> _logos = ['üè¢', 'üè≠', 'üè™', 'üè¨', 'üèõÔ∏è', 'üè¶', 'üè§', 'üè£', 'üèóÔ∏è', 'üèòÔ∏è'];
  final List<String> _regions = [
    '–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å',
    '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ß–µ–ª—è–±–∏–Ω—Å–∫', '–°–∞–º–∞—Ä–∞', '–û–º—Å–∫', '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É'
  ];
  final List<String> _employeeSizes = ['10-50', '50-100', '100-500', '500+'];

  @override
  void dispose() {
    _nameController.dispose();
    _descriptionController.dispose();
    _innController.dispose();
    _phoneController.dispose();
    _emailController.dispose();
    _websiteController.dispose();
    _yearFoundedController.dispose();
    super.dispose();
  }

  Future<void> _createCompany() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      final companyData = {
        'name': _nameController.text.trim(),
        'category_id': _selectedCategory,
        'description': _descriptionController.text.trim(),
        'inn': _innController.text.trim(),
        'region': _selectedRegion,
        'year_founded': int.parse(_yearFoundedController.text.trim()),
        'employees': _selectedEmployees,
        'logo': _selectedLogo,
        'phone': _phoneController.text.trim(),
        'email': _emailController.text.trim(),
        'website': _websiteController.text.trim(),
        'verified': false,
        'rating': 0.0,
        'reviews_count': 0,
        'completed_deals': 0,
      };

      await ApiService.createCompany(companyData);

      // Refresh companies list
      ref.read(companyProvider.notifier).loadCompanies();

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('–ö–æ–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!'),
            backgroundColor: Colors.green,
          ),
        );
        context.pop();
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    final companyNotifier = ref.watch(companyProvider);
    final categories = companyNotifier.categories;

    return Scaffold(
      appBar: AppBar(
        title: const Text('–°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é'),
        actions: [
          if (_isLoading)
            const Padding(
              padding: EdgeInsets.all(16.0),
              child: SizedBox(
                width: 20,
                height: 20,
                child: CircularProgressIndicator(strokeWidth: 2),
              ),
            ),
        ],
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16.0),
          children: [
            // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
            TextFormField(
              controller: _nameController,
              decoration: const InputDecoration(
                labelText: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ *',
                border: OutlineInputBorder(),
              ),
              validator: (value) =>
                  value?.trim().isEmpty == true ? '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏' : null,
            ),
            const SizedBox(height: 16),

            // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            DropdownButtonFormField<String>(
              value: _selectedCategory == 'all' ? categories.first['id'] : _selectedCategory,
              decoration: const InputDecoration(
                labelText: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è *',
                border: OutlineInputBorder(),
              ),
              items: categories.where((cat) => cat['id'] != 'all').map((cat) {
                return DropdownMenuItem(
                  value: cat['id'],
                  child: Text('${cat['icon']} ${cat['nameKey']}'),
                );
              }).toList(),
              onChanged: (value) => setState(() => _selectedCategory = value!),
            ),
            const SizedBox(height: 16),

            // –û–ø–∏—Å–∞–Ω–∏–µ
            TextFormField(
              controller: _descriptionController,
              decoration: const InputDecoration(
                labelText: '–û–ø–∏—Å–∞–Ω–∏–µ *',
                border: OutlineInputBorder(),
              ),
              maxLines: 3,
              validator: (value) =>
                  value?.trim().isEmpty == true ? '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ' : null,
            ),
            const SizedBox(height: 16),

            // –ò–ù–ù
            TextFormField(
              controller: _innController,
              decoration: const InputDecoration(
                labelText: '–ò–ù–ù *',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value?.trim().isEmpty == true) return '–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù';
                if (value!.length < 10) return '–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä';
                return null;
              },
            ),
            const SizedBox(height: 16),

            // –†–µ–≥–∏–æ–Ω
            DropdownButtonFormField<String>(
              value: _selectedRegion,
              decoration: const InputDecoration(
                labelText: '–†–µ–≥–∏–æ–Ω',
                border: OutlineInputBorder(),
              ),
              items: _regions.map((region) {
                return DropdownMenuItem(value: region, child: Text(region));
              }).toList(),
              onChanged: (value) => setState(() => _selectedRegion = value!),
            ),
            const SizedBox(height: 16),

            // –ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è
            TextFormField(
              controller: _yearFoundedController,
              decoration: const InputDecoration(
                labelText: '–ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è *',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.number,
              validator: (value) {
                if (value?.trim().isEmpty == true) return '–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è';
                final year = int.tryParse(value!);
                if (year == null || year < 1900 || year > DateTime.now().year) {
                  return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),

            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            DropdownButtonFormField<String>(
              value: _selectedEmployees,
              decoration: const InputDecoration(
                labelText: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
                border: OutlineInputBorder(),
              ),
              items: _employeeSizes.map((size) {
                return DropdownMenuItem(value: size, child: Text(size));
              }).toList(),
              onChanged: (value) => setState(() => _selectedEmployees = value!),
            ),
            const SizedBox(height: 16),

            // –¢–µ–ª–µ—Ñ–æ–Ω
            TextFormField(
              controller: _phoneController,
              decoration: const InputDecoration(
                labelText: '–¢–µ–ª–µ—Ñ–æ–Ω *',
                border: OutlineInputBorder(),
              ),
              validator: (value) =>
                  value?.trim().isEmpty == true ? '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω' : null,
            ),
            const SizedBox(height: 16),

            // Email
            TextFormField(
              controller: _emailController,
              decoration: const InputDecoration(
                labelText: 'Email *',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value?.trim().isEmpty == true) return '–í–≤–µ–¥–∏—Ç–µ email';
                if (!value!.contains('@')) return '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
                return null;
              },
            ),
            const SizedBox(height: 16),

            // –í–µ–±-—Å–∞–π—Ç
            TextFormField(
              controller: _websiteController,
              decoration: const InputDecoration(
                labelText: '–í–µ–±-—Å–∞–π—Ç *',
                border: OutlineInputBorder(),
              ),
              validator: (value) =>
                  value?.trim().isEmpty == true ? '–í–≤–µ–¥–∏—Ç–µ –≤–µ–±-—Å–∞–π—Ç' : null,
            ),
            const SizedBox(height: 16),

            // –õ–æ–≥–æ—Ç–∏–ø
            const Text('–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø:', style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500)),
            const SizedBox(height: 8),
            Wrap(
              spacing: 8,
              children: _logos.map((logo) {
                return FilterChip(
                  label: Text(logo, style: const TextStyle(fontSize: 20)),
                  selected: _selectedLogo == logo,
                  onSelected: (selected) => setState(() => _selectedLogo = logo),
                );
              }).toList(),
            ),
            const SizedBox(height: 24),

            // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            ElevatedButton(
              onPressed: _isLoading ? null : _createCompany,
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 16),
              ),
              child: _isLoading
                  ? const CircularProgressIndicator()
                  : const Text('–°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é', style: TextStyle(fontSize: 16)),
            ),
          ],
        ),
      ),
    );
  }
}